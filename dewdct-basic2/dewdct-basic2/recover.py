import cv2
import numpy as np
import os
import sys
import glob
import argparse
from tqdm import tqdm
from scipy.fft import dct, idct

def check_dependencies():
    """Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt."""
    try:
        import cv2
        import numpy
        import scipy.fft
        import tqdm
    except ImportError as e:
        print(f"[ERROR] Thi·∫øu th∆∞ vi·ªán: {e.name}. C√†i b·∫±ng: pip3 install {e.name.lower()}")
        sys.exit(1)

def dct_energy(block):
    """T√≠nh nƒÉng l∆∞·ª£ng c·ªßa kh·ªëi DCT, b·ªè h·ªá s·ªë DC."""
    return np.sum(block[1:] ** 2)

def bits_to_text(binary):
    """Chuy·ªÉn d√£y bit nh·ªã ph√¢n th√†nh chu·ªói k√Ω t·ª±."""
    if len(binary) < 8:
        return ""
    chars = []
    for i in range(0, len(binary) - 7, 8):
        try:
            chars.append(chr(int(binary[i:i+8], 2)))
        except ValueError:
            break
    return ''.join(chars)

def extract_bits_from_frame(frame, bit_limit, block_size=8, threshold=10000, bits_per_block=1):
    """Tr√≠ch xu·∫•t bit t·ª´ khung h√¨nh d·ª±a v√†o c√°c kh·ªëi c√≥ nƒÉng l∆∞·ª£ng cao."""
    height, width = frame.shape[:2]
    ycrcb = cv2.cvtColor(frame, cv2.COLOR_BGR2YCrCb)
    extracted_bits = []
    count = 0

    for y in range(0, height - block_size + 1, block_size):
        for x in range(0, width - block_size + 1, block_size):
            if count >= bit_limit:
                break
            block = ycrcb[y:y+block_size, x:x+block_size, 0].astype(float)
            dct_block = dct(dct(block.T, norm='ortho').T, norm='ortho')
            if dct_energy(dct_block) > threshold:
                for k in range(bits_per_block):
                    idx = (4 + k) % block_size
                    bit = '1' if dct_block[idx, idx] > 0 else '0'
                    extracted_bits.append(bit)
                    count += 1
                    if count >= bit_limit:
                        break
        if count >= bit_limit:
            break

    return extracted_bits

def recover_message_from_frames(frames_path, output_path, message_length, reference_path=None,
                                 bits_per_block=1, block_size=8, threshold=10000):
    """Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp t·ª´ t·∫•t c·∫£ khung h√¨nh PNG trong th∆∞ m·ª•c."""
    if not os.path.isdir(frames_path):
        raise FileNotFoundError(f"‚ùå Th∆∞ m·ª•c '{frames_path}' kh√¥ng t·ªìn t·∫°i.")

    frame_list = sorted(glob.glob(os.path.join(frames_path, "*.png")),
                        key=lambda x: int(os.path.splitext(os.path.basename(x))[0]))
    if not frame_list:
        raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y file PNG trong th∆∞ m·ª•c.")

    print(f"[INFO] Tr√≠ch xu·∫•t t·ª´ {len(frame_list)} khung h√¨nh...")

    total_bits = message_length * 8
    bitstream = []

    for frame_file in tqdm(frame_list, desc="üß© ƒêang x·ª≠ l√Ω"):
        if len(bitstream) >= total_bits:
            break
        frame = cv2.imread(frame_file)
        if frame is None:
            print(f"[!] B·ªè qua frame l·ªói: {frame_file}")
            continue
        bits = extract_bits_from_frame(frame, total_bits - len(bitstream),
                                       block_size=block_size,
                                       threshold=threshold,
                                       bits_per_block=bits_per_block)
        bitstream.extend(bits)

    if len(bitstream) < total_bits:
        print(f"[‚ö†Ô∏è] Ch·ªâ tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(bitstream)} bit (c·∫ßn {total_bits}).")

    recovered = bits_to_text(''.join(bitstream[:total_bits]))

    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w') as out:
        out.write(recovered)

    print(f"[‚úÖ] ƒê√£ l∆∞u th√¥ng ƒëi·ªáp kh√¥i ph·ª•c t·∫°i: {output_path}")

    # So s√°nh v·ªõi th√¥ng ƒëi·ªáp g·ªëc n·∫øu c√≥
    if reference_path and os.path.exists(reference_path):
        with open(reference_path, 'r') as ref:
            original = ref.read()
        if recovered == original:
            print("üéâ Th√†nh c√¥ng: Th√¥ng ƒëi·ªáp tr√≠ch ra kh·ªõp v·ªõi th√¥ng ƒëi·ªáp g·ªëc.")
        else:
            print("‚ùó Th√¥ng ƒëi·ªáp tr√≠ch ra KH√îNG kh·ªõp v·ªõi th√¥ng ƒëi·ªáp g·ªëc.")
            print(f"[Extracted] {recovered}")
            print(f"[Original ] {original}")

def main():
    check_dependencies()

    parser = argparse.ArgumentParser(description="Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp ·∫©n trong khung h√¨nh PNG s·ª≠ d·ª•ng DCT")
    parser.add_argument("--frames-dir", default="output/stego_frames", help="Th∆∞ m·ª•c ch·ª©a ·∫£nh PNG ƒë√£ gi·∫•u tin")
    parser.add_argument("--output", default="output/recovered.txt", help="File ƒë·∫ßu ra ch·ª©a th√¥ng ƒëi·ªáp tr√≠ch xu·∫•t")
    parser.add_argument("--original-message", default="message.txt", help="File th√¥ng ƒëi·ªáp g·ªëc (t√πy ch·ªçn ƒë·ªÉ so s√°nh)")
    parser.add_argument("--msg-length", type=int, default=23, help="S·ªë k√Ω t·ª± c·∫ßn kh√¥i ph·ª•c (m·∫∑c ƒë·ªãnh: 23)")
    parser.add_argument("--num-bits", type=int, default=1, help="S·ªë bit ƒë√£ nh√∫ng m·ªói kh·ªëi")
    parser.add_argument("--block-size", type=int, default=8, help="K√≠ch th∆∞·ªõc kh·ªëi DCT")
    parser.add_argument("--energy-threshold", type=float, default=10000, help="Ng∆∞·ª°ng nƒÉng l∆∞·ª£ng ƒë·ªÉ ch·ªçn kh·ªëi")

    args = parser.parse_args()

    try:
        recover_message_from_frames(args.frames_dir, args.output,
                                    message_length=args.msg_length,
                                    reference_path=args.original_message,
                                    bits_per_block=args.num_bits,
                                    block_size=args.block_size,
                                    threshold=args.energy_threshold)
    except Exception as e:
        print(f"[ERROR] {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

